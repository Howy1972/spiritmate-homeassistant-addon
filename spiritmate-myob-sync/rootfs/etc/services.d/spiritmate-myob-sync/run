#!/usr/bin/with-contenv bashio
# ==============================================================================
# SpiritMate MYOB Sync - service runner
# ==============================================================================

# Read configuration from add-on options
IMAP_HOST=$(bashio::config 'imap_host')
IMAP_PORT=$(bashio::config 'imap_port')
IMAP_USER=$(bashio::config 'imap_user')
IMAP_PASS=$(bashio::config 'imap_pass')
IMAP_MAILBOX=$(bashio::config 'imap_mailbox')

FROM_EXACT=$(bashio::config 'from_exact')
SUBJECT_PREFIX=$(bashio::config 'subject_prefix')
LABEL_PROCESSED=$(bashio::config 'label_processed')

FIRESTORE_PROJECT_ID=$(bashio::config 'firestore_project_id')

SCHEDULE_ENABLED=$(bashio::config 'schedule_enabled')
SCHEDULE_CRON=$(bashio::config 'schedule_cron')
SCHEDULE_START_TIME=$(bashio::config 'schedule_start_time')
SCHEDULE_END_TIME=$(bashio::config 'schedule_end_time')
SCHEDULE_INTERVAL=$(bashio::config 'schedule_interval')
TIMEZONE=$(bashio::config 'timezone')
LOG_LEVEL=$(bashio::config 'log_level')

# Set timezone
export TZ="${TIMEZONE}"
# Also persist TZ for BusyBox utilities (crond reads /etc/TZ)
echo -n "${TZ}" > /etc/TZ

# Validate required configuration
if bashio::var.is_empty "${IMAP_HOST}" || \
   bashio::var.is_empty "${IMAP_PORT}" || \
   bashio::var.is_empty "${IMAP_USER}" || \
   bashio::var.is_empty "${IMAP_PASS}" || \
   bashio::var.is_empty "${FROM_EXACT}" || \
   bashio::var.is_empty "${SUBJECT_PREFIX}"; then
  bashio::log.error "Missing required IMAP/email settings. Please configure imap_* and email filters."
  exit 1
fi

# Export basic env vars that server needs (but NOT GOOGLE_APPLICATION_CREDENTIALS yet)
export IMAP_HOST IMAP_PORT IMAP_USER IMAP_PASS IMAP_MAILBOX
export FROM_EXACT SUBJECT_PREFIX LABEL_PROCESSED
export FIRESTORE_PROJECT_ID LOG_LEVEL
export SCHEDULE_ENABLED SCHEDULE_CRON SCHEDULE_START_TIME SCHEDULE_END_TIME SCHEDULE_INTERVAL
export TZ

# Start ingress/status/upload server early WITHOUT credentials env var
# This prevents Google Cloud SDK from auto-loading the credentials file
PORT=8099 node /app/dist/server.js &

# Check Firestore credentials (wait for upload if missing)
if [[ ! -f "/share/spiritmate/service-account.json" ]]; then
  bashio::log.warning "Firebase service account not found at /share/spiritmate/service-account.json"
  bashio::log.warning "Open Web UI and upload service-account.json; waiting..."
  while [[ ! -f "/share/spiritmate/service-account.json" ]]; do
    sleep 5
  done
  bashio::log.info "service-account.json detected. Continuing startup..."
fi

# Copy credentials where Node can read them
cp /share/spiritmate/service-account.json /app/service-account.json

# NOW set the credentials path (after server is already running)
GOOGLE_APPLICATION_CREDENTIALS=/app/service-account.json

# Export credentials env var (other vars already exported above)
export GOOGLE_APPLICATION_CREDENTIALS

bashio::log.info "Starting MYOB sync worker"
bashio::log.info "IMAP: ${IMAP_USER}@${IMAP_HOST}:${IMAP_PORT}/${IMAP_MAILBOX:=INBOX}"
bashio::log.info "Schedule enabled: ${SCHEDULE_ENABLED} (${SCHEDULE_CRON})"

# Server already started above (without GOOGLE_APPLICATION_CREDENTIALS set)

if [[ "${SCHEDULE_ENABLED}" == "true" ]]; then
  bashio::log.info "Setting up scheduled sync with cron"
  bashio::log.info "Timezone: ${TZ}"
  bashio::log.info "Schedule: ${SCHEDULE_CRON}"
  
  # Create cron job with full environment
  cat > /tmp/sync-cron.sh <<EOF
#!/bin/bash
echo "===========================================" >> /tmp/cron.log
echo "\$(TZ='${TZ}' date '+%Y-%m-%d %H:%M:%S %Z') - Cron job STARTED" >> /tmp/cron.log
export TZ="${TZ}"
echo "Timezone: \${TZ}" >> /tmp/cron.log
echo "Current time: \$(date)" >> /tmp/cron.log
export IMAP_HOST="${IMAP_HOST}"
export IMAP_PORT="${IMAP_PORT}"
export IMAP_USER="${IMAP_USER}"
export IMAP_PASS="${IMAP_PASS}"
export IMAP_MAILBOX="${IMAP_MAILBOX}"
export FROM_EXACT="${FROM_EXACT}"
export SUBJECT_PREFIX="${SUBJECT_PREFIX}"
export LABEL_PROCESSED="${LABEL_PROCESSED}"
export FIRESTORE_PROJECT_ID="${FIRESTORE_PROJECT_ID}"
export GOOGLE_APPLICATION_CREDENTIALS="${GOOGLE_APPLICATION_CREDENTIALS}"
export LOG_LEVEL="${LOG_LEVEL}"
echo "About to run sync worker..." >> /tmp/cron.log
cd /app && node dist/index.js >> /tmp/cron.log 2>&1
EXIT_CODE=\$?
echo "\$(TZ='${TZ}' date '+%Y-%m-%d %H:%M:%S %Z') - Cron job COMPLETED with exit code \${EXIT_CODE}" >> /tmp/cron.log
echo "===========================================" >> /tmp/cron.log
EOF
  chmod +x /tmp/sync-cron.sh
  
  # Fix cron expression for BusyBox - replace */1 with *
  CRON_FIXED="${SCHEDULE_CRON//\*\/1 /\* }"
  
  # BusyBox cron needs just: minute hour day month dayofweek command
  # NO environment variables in crontab
  echo "${CRON_FIXED} /tmp/sync-cron.sh" > /etc/crontabs/root
  # Ensure correct ownership and permissions so crond will load it
  chown root:root /etc/crontabs/root
  chmod 600 /etc/crontabs/root
  
  bashio::log.info "Crontab: ${CRON_FIXED} /tmp/sync-cron.sh"
  
  # Test run
  bashio::log.info "Running test sync..."
  /tmp/sync-cron.sh &
  
  # Start crond in foreground as the main service process (single instance)
  bashio::log.info "Starting crond (foreground)..."
  # Kill any existing instance to avoid duplicates
  pkill crond >/dev/null 2>&1 || true
  # Explicitly point to crontab dir and enable logfile for diagnostics
  exec crond -f -l 8 -L /tmp/cron-execution.log -c /etc/crontabs
else
  bashio::log.info "Schedule disabled. UI is available; you can trigger runs from the panel. Running worker once now and keeping service alive."
  node /app/dist/index.js || bashio::log.warning "Initial run exited with code $?"
  while true; do
    sleep 3600
  done
fi
